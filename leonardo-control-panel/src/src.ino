#include "HID.h"
#include "pins.h"

#define _USING_HID

#if !defined(_USING_HID)

#error "Using legacy HID core (non pluggable)"

#endif


static const uint8_t _hidReportDescriptor[] PROGMEM = {
    // generated by rdmarsh2/usb-hid-generator

  0x5, 0x1, // Global(UsagePage(GenericDesktop))
  0x9, 0x5, // Local(Usage(GenericDesktop(Gamepad)))
  0xA1, 0x1, // Main(Collection)
  0x85, 0x03, // Report ID(3),
    0x5, 0x9, // Global(UsagePage(Button))
    0x15, 0x0, // Global(LogicalMinimum(0))
    0x25, 0x1, // Global(LogicalMaximum(1))
    0x95, 0x4, // Global(ReportCount(4)
    0x75, 0x1, // Global(ReportSize(1))
    0x19, 0x1, // Local(UsageMinimum(Button(1)))
    0x29, 0x4, // Local(UsageMaximum(Button(4)))
    0x81, 0x2, // Main(Input(2))
    // switches
    0x95, 0x3, // Global(ReportCount(3)
    0x19, 0x5, // Local(UsageMinimum(Button(5)))
    0x29, 0x7, // Local(UsageMaximum(Button(7)))
    0x81, 0x12, // Main(Input(18))
    // padding bit
    0x95, 0x1, // Global(ReportCount(1))
    0x81, 0x1, // Main(Input(Constant)
    // dial
    0x5, 0x1, // Global(UsagePage(GenericDesktop))
    0x15, 0x1, // Global(LogicalMinimum(1))
    0x25, 0xA, // Global(LogicalMaximum(10))
    0x95, 0x1, // Global(ReportCount(1))
    0x75, 0x4, // Global(ReportSize(4))
    0x9, 0x37, // Local(Usage(GenericDesktop(Dial)))
    0x81, 0x12, // Main(Input(18))
    // padding bits
    0x81, 0x1, // Main(Input(Constant)
    // LEDs
    /*0x8, 0x3A,
    0x15, 0x0, // Global, logical minimum
    0x25, 0x1, //global, logical maximum
    0x95, 0x2, // global, report count
    0x75, 0x1, // Global(ReportSize(1))
    0x91, 0x52,   // main, output, 1 byte, 0101 0010
    // padding bits
    0x95, 0x6, // global, report count
    0x91, 0x1, // Main(Output(Constant)*/
  0xC0, // Main(EndCollection)
};

void setup() {
    // these are one-indexed for USB reasons
    pinMode(BUTTON_1, INPUT_PULLUP);
    pinMode(BUTTON_2, INPUT_PULLUP);
    pinMode(BUTTON_3, INPUT_PULLUP);
    pinMode(BUTTON_4, INPUT_PULLUP);
    pinMode(SWITCH_1, INPUT_PULLUP);
    pinMode(SWITCH_2, INPUT_PULLUP);
    pinMode(SWITCH_3, INPUT_PULLUP);
    // TODO: additional switches, slider, dial

    static HIDSubDescriptor node(_hidReportDescriptor, sizeof(_hidReportDescriptor));
    HID().AppendDescriptor(&node);
}

struct Report_Input {
    short buttons: 4;
    short switches: 3;
    short padding_1: 1;
    short dial: 4;
    short padding_2: 4;
};

void loop() {
    Report_Input report;

    report.buttons = 0;
    report.switches = 0;
    report.dial = 0;

    report.buttons |= !digitalRead(BUTTON_1);
    report.buttons |= !digitalRead(BUTTON_2) << 1;
    report.buttons |= !digitalRead(BUTTON_3) << 2;
    report.buttons |= !digitalRead(BUTTON_4) << 3;

    report.switches |= !digitalRead(SWITCH_1);
    report.switches |= !digitalRead(SWITCH_2) << 1;
    report.switches |= !digitalRead(SWITCH_3) << 2;

    // TODO: read analog report
    short dial_raw = analogRead(DIAL_PIN);

    report.dial = (dial_raw + 50) /  110;

    
    HID().SendReport(3, &report, sizeof(report));

    delay(1);
}
